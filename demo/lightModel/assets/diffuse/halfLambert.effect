// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        diffuseCol: { value: [1, 1, 1, 1], editor: { type: color } }
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>
  
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;
  in vec3 a_normal;

  out vec4 v_color;
  out vec2 v_uv0;
  out vec3 v_normal;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1.0);
    pos = cc_matProj * (cc_matView * cc_matWorld) * pos;

    v_normal = (cc_matWorldIT * vec4(a_normal, 0.0)).xyz;

    v_uv0 = a_texCoord;
    v_color = a_color;
    return pos;
  }
}%
 
CCProgram unlit-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>

  in vec2 v_uv0;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 diffuseCol;
  };

  vec4 frag () {
    vec4 col = vec4(1, 1, 1, 1);

    vec3 ambient = cc_ambientSky.xyz;
    vec3 worldNormal = normalize(v_normal);
    vec3 worldLight = normalize(cc_mainLitDir.xyz);
    float halfLambert = dot(worldNormal, worldLight) * 0.5 + 0.5;
    vec3 diffuse = cc_mainLitColor.rgb * diffuseCol.rgb * halfLambert;
    vec4 color = vec4(ambient + diffuse, 1.0);

    col = color;
    return col;
  }
}%
