// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
        blendSrc: src_alpha
        blendDst: one_minus_src_alpha
        blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        u_size: { value: [0.0, 0.0] }
        u_time: { value: 0.0 }
        u_rate: { value: 0.2 }
}%

CCProgram sprite-vs %{
  precision highp float;

  #include <builtin/uniforms/cc-global>
  
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_texCoord;
    v_color = a_color;
    
    return pos;
  }
}%


CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 v_color;
  in vec2 v_uv0;

  uniform Constant {
    vec2 u_size;
    float u_time;
    float u_rate;
  };

  #if USE_TEXTURE
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif
 
  vec2 wave(in vec2 p) {
      float d = u_time * u_rate;
      float x = 8.0*(p.x + d);
      float y = 8.0*(p.y + d);
      vec2 uv = vec2(cos(x-y)*cos(y), sin(x+y)*sin(y));
      return uv;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      vec2 uv = v_uv0 + 2.0/u_size.x * (wave(v_uv0) - wave(v_uv0+u_size));
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv);
    #endif

    o *= v_color;
    ALPHA_TEST(o);
    return o;
  }
}%
