// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_size: { value: [0.0, 0.0] }
        u_time: { value: 0.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform ARGS {
    vec2 u_size;
    float u_time;
  };

  #define F(x,y) vec2(cos(x-y)*cos(y), sin(x+y)*sin(y))

  vec2 wave(in vec2 p) {
      float d = u_time*0.2, x=8.*(p.x+d), y=8.*(p.y+d);
      return F(x, y);
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    o *= v_color;

    ALPHA_TEST(o);

    vec2 q = v_uv0 + 2.0/u_size.x * (wave(v_uv0) - wave(v_uv0+u_size));

    gl_FragColor = o * texture(texture, q);
  }
}%
